:-dynamic(sur/2).
:-dynamic(libre/1).

%sur(a,terre).
%sur(b,terre).
sur(c,terre).

%sur(c,b).
%sur(b,c).
%sur(c,a).
sur(a,c).
%sur(c,b).
sur(b,a).
%sur(a,b).
%sur(d,b).

%sur(c,a).
%sur(d,c).
%sur(e,b).
%sur(f,e).


%libre(a).
%libre(f).
%libre(e).
%libre(d).
%libre(c).

libre(b).

%Liberer un element qui est se trouve au dessous d'un element libre
liberer(X):-not(libre(X)),
           sur(Y,X),
           libre(Y),format("~w est libre",[Y]),nl,
           retract(sur(Y,X)),
           assert(sur(Y,terre)),
           assert(libre(X)),format("donc ~w est libre maintenant ",[X]),nl.


% liberer un element qui est se trouve au dessous d'un element qui
% n'est pas libre
liberer(X):-not(libre(X)),
           sur(Y,X),
           not(libre(Y)),
           liberer(Y),format("on a liberer ~w",[Y]),nl,
           retract(sur(Y,X)),
           assert(sur(Y,terre)),
           assert(libre(X)).

%l'element est deja sur terre
surterre(X,terre):-sur(X,terre),format("~w est sur terre",[X]),nl.


%l'element n'est aps sur terre mais il est libre
surterre(X,terre):-not(sur(X,terre)),format("~w n'est pas sur terre",[X]),nl,

    libre(X),format("~w est libre",[X]),nl,
                  sur(X,Y),format("~w est sur ~w ",[X,Y]),nl,

                  retract(sur(X,Y)),
                  assert(libre(Y)),
                  assert(sur(X,terre)),format("~w sur terre ",[X]),nl.

%l'element est sur terre mais il est pas libre
surterre(X,terre):-not(sur(X,terre)),format("~w n'est pas sur terre",[X]),nl,
                  not(libre(X)),format("~w n'est pas libre",[X]),nl,
                  liberer(X),format("liberer ~w ",[X]),nl,
                  sur(X,Y),format("~w est sur ~w ",[X,Y]),nl,
                  retract(sur(X,Y)),
                  assert(libre(Y)),
                  assert(sur(X,terre)),format("~w sur terre ",[X]),nl.



%mettre un element qui est libre sur un autre qui est aussi libre
deplacer(X,Y):-libre(Y),
               format("~w est libre",[Y]),nl,
               libre(X),format("~w est libre",[X]),nl,
               sur(X,Z),
               assert(sur(X,Y)),
               assert(libre(Z)),
               retract(libre(Y)),format("deplacer ~w sur ~w",[X,Y]),nl.



%mettre un element qui n'est pas libre sur un autre qui est libre
deplacer(X,Y):-format("deplacer ~w vers ~w",[X,Y]),nl,
               libre(Y),format("~w est libre",[Y]),nl,
               not(libre(X)),format("~w n'est pas libre",[X]),nl,
               liberer(X),format("liberer ~w ",[X]),nl,
               sur(X,Z),format("~w est sur ~w ",[X,Z]),nl,
               retract(sur(X,Z)),
               assert(sur(X,Y)),
               assert(libre(Z)),format("~w est libre ",[Z]),nl.


% mettre un element qui n'est pas libre sur un autre qui est aussi n'est
% pas libre
%
deplacer(X,Y):-format("deplacer ~w sur ~w",[X,Y]),nl,not(libre(Y)),
               format("~w n'est pas libre",[Y]),nl,
               not(libre(X)),format("~w n'est pas libre",[X]),nl,
               liberer(Y),format("liberer ~w ",[Y]),nl,
               liberer(X),format("liberer ~w ",[X]),nl,
               sur(X,Z),format("~w est sur ~w ",[X,Z]),nl,
               retract(sur(X,Z)),
               assert(sur(X,Y)),
               assert(libre(Z)),format("~w est libre ",[Z]),nl.


%mettre tous les element sur terre et deplacer les element un par un
super:-surterre(a,terre),deplacer(b,a),nl,deplacer(c,b),nl.


p:-abolish(libre/1),abolish(sur/2).
